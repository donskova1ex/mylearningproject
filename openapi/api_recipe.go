// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Swagger Potion maker - OpenAPI 3.0
 *
 * Сервис изготовления зелий
 *
 * API version: 1.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"errors"
	"io"

	"github.com/gorilla/mux"
)

// RecipeAPIController binds http requests to an api service and writes the service results to the http response
type RecipeAPIController struct {
	service RecipeAPIServicer
	errorHandler ErrorHandler
}

// RecipeAPIOption for how the controller is set up.
type RecipeAPIOption func(*RecipeAPIController)

// WithRecipeAPIErrorHandler inject ErrorHandler into controller
func WithRecipeAPIErrorHandler(h ErrorHandler) RecipeAPIOption {
	return func(c *RecipeAPIController) {
		c.errorHandler = h
	}
}

// NewRecipeAPIController creates a default api controller
func NewRecipeAPIController(s RecipeAPIServicer, opts ...RecipeAPIOption) *RecipeAPIController {
	controller := &RecipeAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RecipeAPIController
func (c *RecipeAPIController) Routes() Routes {
	return Routes{
		"RecipesList": Route{
			strings.ToUpper("Get"),
			"/api/v1/recipes",
			c.RecipesList,
		},
		"GetRecipe": Route{
			strings.ToUpper("Get"),
			"/api/v1/recipe",
			c.GetRecipe,
		},
		"GetRecipeById": Route{
			strings.ToUpper("Get"),
			"/api/v1/recipe/{id}",
			c.GetRecipeById,
		},
		"UpdateRecipeWithForm": Route{
			strings.ToUpper("Put"),
			"/api/v1/recipe/{id}",
			c.UpdateRecipeWithForm,
		},
		"DeleteRecipe": Route{
			strings.ToUpper("Delete"),
			"/api/v1/recipe/{id}",
			c.DeleteRecipe,
		},
	}
}

// RecipesList - recipes list
func (c *RecipeAPIController) RecipesList(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RecipesList(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRecipe - Find recipe by paramets
func (c *RecipeAPIController) GetRecipe(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var idParam string
	if query.Has("id") {
		param := query.Get("id")

		idParam = param
	} else {
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
	}
	result, err := c.service.GetRecipe(r.Context(), idParam, nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRecipeById - Find recipe by ID
func (c *RecipeAPIController) GetRecipeById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.GetRecipeById(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateRecipeWithForm - Update a recipe by id
func (c *RecipeAPIController) UpdateRecipeWithForm(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	recipeParam := Recipe{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&recipeParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRecipeRequired(recipeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRecipeConstraints(recipeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateRecipeWithForm(r.Context(), idParam, recipeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteRecipe - Delete recipe
func (c *RecipeAPIController) DeleteRecipe(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.DeleteRecipe(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
