// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Swagger Potion maker - OpenAPI 3.0
 *
 * Сервис изготовления зелий
 *
 * API version: 1.0.0
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// WitchAPIController binds http requests to an api service and writes the service results to the http response
type WitchAPIController struct {
	service WitchAPIServicer
	errorHandler ErrorHandler
}

// WitchAPIOption for how the controller is set up.
type WitchAPIOption func(*WitchAPIController)

// WithWitchAPIErrorHandler inject ErrorHandler into controller
func WithWitchAPIErrorHandler(h ErrorHandler) WitchAPIOption {
	return func(c *WitchAPIController) {
		c.errorHandler = h
	}
}

// NewWitchAPIController creates a default api controller
func NewWitchAPIController(s WitchAPIServicer, opts ...WitchAPIOption) *WitchAPIController {
	controller := &WitchAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the WitchAPIController
func (c *WitchAPIController) Routes() Routes {
	return Routes{
		"WitchesList": Route{
			strings.ToUpper("Get"),
			"/api/v1/witches",
			c.WitchesList,
		},
		"GetWitch": Route{
			strings.ToUpper("Get"),
			"/api/v1/witch",
			c.GetWitch,
		},
		"GetWitchById": Route{
			strings.ToUpper("Get"),
			"/api/v1/witch/{id}",
			c.GetWitchById,
		},
		"UpdateWitchWithForm": Route{
			strings.ToUpper("Put"),
			"/api/v1/witch/{id}",
			c.UpdateWitchWithForm,
		},
		"DeleteWitch": Route{
			strings.ToUpper("Delete"),
			"/api/v1/witch/{id}",
			c.DeleteWitch,
		},
	}
}

// WitchesList - witches list
func (c *WitchAPIController) WitchesList(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.WitchesList(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetWitch - Find witch by parametrs
func (c *WitchAPIController) GetWitch(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var idParam string
	if query.Has("id") {
		param := query.Get("id")

		idParam = param
	} else {
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
	}
	result, err := c.service.GetWitch(r.Context(), idParam, nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetWitchById - Find witch by ID
func (c *WitchAPIController) GetWitchById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.GetWitchById(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateWitchWithForm - Update a witch in the store with form data
func (c *WitchAPIController) UpdateWitchWithForm(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.UpdateWitchWithForm(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteWitch - Deletes a witch
func (c *WitchAPIController) DeleteWitch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "id", Err: err}, nil)
		return
	}
	result, err := c.service.DeleteWitch(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
