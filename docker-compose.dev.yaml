version: "3.9"

x-kafka-broker-env-base: &kafka_broker_env_base
  KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
  KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  KAFKA_CONFLUENT_TOPIC_REPLICATION_FACTOR: 2

x-kafka-broker-base: &kafka_broker_base
  image: kafka-jmx
  healthcheck:
    test: kafka-topics --bootstrap-server localhost:9092 --list || exit 1
    start_period: 30s
    timeout: 5s
    interval: 3s
    retries: 100
  depends_on:
    zookeeper:
      condition: service_healthy

services:
  postgres:
    container_name: mylearningproject.postgres
    image: postgres:15
    hostname: postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_SSL_MODE=${POSTGRES_SSL_MODE}
    ports:
      - 5432:5432
    volumes:
      - .:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U dev -d dev'"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 30s
  migrations-up:
    container_name: mylearningproject.migrations-up
    environment:
      - GOOSE_DRIVER=${GOOSE_DRIVER}
      - GOOSE_DBSTRING=${GOOSE_DBSTRING}
    build:
      context: .
      dockerfile: Dockerfile.migrations
    command: ["goose", "-dir", "migrations", "up"]
    depends_on:
      postgres:
        condition: service_healthy
  migrations-down:
    container_name: mylearningproject.migrations-down
    environment:
      - GOOSE_DRIVER=${GOOSE_DRIVER}
      - GOOSE_DBSTRING=${GOOSE_DBSTRING}
    build:
      context: .
      dockerfile: Dockerfile.migrations
    command: ["goose", "-dir", "migrations", "reset"]
    profiles:
      - migrations-down
    depends_on:
      postgres:
        condition: service_healthy
  api:
    container_name: mylearningproject.api
    environment:
      - API_PORT=${API_PORT}
      - POSTGRES_DSN=${POSTGRES_DSN}
    image: donskova1ex/api:latest
    profiles:
      - api
    ports:
      - 8080:${API_PORT}
    depends_on:
      - migrations-up
  zookeeper:
    image: zookeeper-jmx
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: jps -l | grep zookeeper || exit 1
      start_period: 1s
      timeout: 5s
      interval: 3s
      retries: 100

  kafka1:
    <<: *kafka_broker_base
    container_name: kafka1
    ports:
      - "19092:19092"
    environment:
      <<: *kafka_broker_env_base
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: EXTERNAL://localhost:19092,INTERNAL://kafka1:9092

  kafka2:
    <<: *kafka_broker_base
    container_name: kafka2
    ports:
      - "29092:29092"
    environment:
      <<: *kafka_broker_env_base
      KAFKA_BROKER_ID: 2
      KAFKA_ADVERTISED_LISTENERS: EXTERNAL://localhost:29092,INTERNAL://kafka2:9092

  kafka3:
    <<: *kafka_broker_base
    container_name: kafka3
    ports:
      - "39092:39092"
    environment:
      <<: *kafka_broker_env_base
      KAFKA_BROKER_ID: 3
      KAFKA_ADVERTISED_LISTENERS: EXTERNAL://localhost:39092,INTERNAL://kafka3:9092
